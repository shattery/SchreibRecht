---
const { title, description, buttonTxt } = Astro.props;
---

<div
  id="interactive-card"
  class="max-w-sm p-6 rounded-lg shadow-lg bg-dark/30 backdrop-blur-lg border border-light/20 transition-transform duration-500"
  style="transform-origin: center;"
>
  <h2 class="text-2xl font-bold text-dark mb-4">{title}</h2>
  <p class="text-dark/80 mb-4">
    {description}
  </p>
  <a
    href="#"
    class="bg-primary/80 text-dark px-4 py-2 rounded-lg shadow hover:bg-secondary/90 transition duration-500"
  >
    {buttonTxt}
  </a>
</div>

<script>
  if (typeof window !== "undefined") {
    const card = document.getElementById("interactive-card");

    if (card) {
      // Setze einen Übergang für flüssige Bewegungen
      card.style.transition = "transform 0.2s ease-out";

      card.addEventListener("mousemove", (event) => {
        const rect = card.getBoundingClientRect();

        // Berechne den X-Offset für die Rotation und Translation
        const x = ((event.clientX - rect.left) / rect.width - 0.5) * 25; // Rotation X
        const y = ((event.clientY - rect.top) / rect.height - 0.5) * 25; // Rotation Y

        // Berechne den X- und Y-Offset für die Translation
        const translateX =
          ((event.clientX - rect.left) / rect.width - 0.5) * 20; // Translation X
        const translateY =
          ((event.clientY - rect.top) / rect.height - 0.5) * 20; // Translation Y

        // Kombiniere beide Bewegungen: Rotation und Translation
        card.style.transform = `rotateY(${x}deg) rotateX(${y * -1}deg) translateX(${translateX}px) translateY(${translateY}px)`;
      });

      card.addEventListener("mouseleave", () => {
        // Rücksetzen der Karte bei Verlassen der Maus
        card.style.transform = `rotateY(0deg) rotateX(0deg) translateX(0px) translateY(0px)`;
      });
    }
  }
</script>
